local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local blur = Instance.new("BlurEffect")
blur.Size = 0
blur.Parent = Lighting
TweenService:Create(blur, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = 24}):Play()

local gui = Instance.new("ScreenGui", PlayerGui)
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.Name = "rusekh"

local blueOverlay = Instance.new("Frame")
blueOverlay.Size = UDim2.new(1, 0, 1, 0)
blueOverlay.BackgroundColor3 = Color3.fromRGB(20, 30, 60)
blueOverlay.BackgroundTransparency = 1
blueOverlay.ZIndex = 1
blueOverlay.Parent = gui
TweenService:Create(blueOverlay, TweenInfo.new(0.5), {BackgroundTransparency = 0.4}):Play()

local function addGradient(label)
	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 200, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 100, 255))
	}
	gradient.Rotation = 45
	gradient.Parent = label
end

local function displayLine(text, yOffset)
	local labels = {}

	for i = 1, #text do
		local letter = text:sub(i, i)

		local lbl = Instance.new("TextLabel")
		lbl.Text = letter
		lbl.Font = Enum.Font.GothamBlack
		lbl.TextSize = 120
		lbl.TextColor3 = Color3.new(1, 1, 1)
		lbl.BackgroundTransparency = 1
		lbl.Size = UDim2.new(0, 100, 0, 120)
		lbl.Position = UDim2.new(0.5, (i - (#text / 2)) * 70 - 35, 0.5, yOffset)
		lbl.AnchorPoint = Vector2.new(0.5, 0.5)
		lbl.TextTransparency = 1
		lbl.TextStrokeTransparency = 1
		lbl.ZIndex = 2
		lbl.Parent = gui
		addGradient(lbl)

		local scale = Instance.new("UIScale", lbl)
		scale.Scale = 0.5

		table.insert(labels, {label = lbl, scale = scale})

		task.delay((i - 1) * 0.01, function()
			local fadeIn = TweenService:Create(lbl, TweenInfo.new(0.3), {
				TextTransparency = 0,
				TextStrokeTransparency = 0.6
			})
			local zoomIn = TweenService:Create(scale, TweenInfo.new(0.3), {
				Scale = 1
			})
			fadeIn:Play()
			zoomIn:Play()
		end)
	end

	return labels
end

local function displayTextLines(lines, delayBeforeNext)
	local allLabels = {}

	local lineSpacing = 130
	local totalLines = #lines
	local startYOffset = -(lineSpacing * (totalLines - 1)) / 2

	for i, lineText in ipairs(lines) do
		local yOffset = startYOffset + (i - 1) * lineSpacing
		local lineLabels = displayLine(lineText, yOffset)
		for _, lblData in pairs(lineLabels) do
			table.insert(allLabels, lblData)
		end
	end

	local maxTextLength = 0
	for _, line in ipairs(lines) do
		if #line > maxTextLength then maxTextLength = #line end
	end
	task.wait(maxTextLength * 0.01 + 0.3 + delayBeforeNext)

	for _, item in pairs(allLabels) do
		local lbl = item.label
		local scale = item.scale

		local fadeOut = TweenService:Create(lbl, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
			TextTransparency = 1,
			TextStrokeTransparency = 1
		})
		local popOut = TweenService:Create(scale, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
			Scale = 1.3
		})

		fadeOut:Play()
		popOut:Play()
	end

	task.wait(0.5)

	for _, item in pairs(allLabels) do
		item.label:Destroy()
	end
end

task.spawn(function()
	displayTextLines({"loading", "dependencies.."}, 2.5)
	displayTextLines({"loaded!"}, 0.5)
	displayTextLines({"made by rusekh", "(discord)"}, 1.2)

	TweenService:Create(blueOverlay, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
	TweenService:Create(blur, TweenInfo.new(0.5), {Size = 0}):Play()

	task.wait(0.6)
	gui:Destroy()
	blur:Destroy()
end)
