 local key = "E"
local flashbacklength = 80
local flashbackspeed = 1.5

if not game:IsLoaded() then game.Loaded:Wait() end

local name = "FlashbackSystem"
local frames, uis, LP, RS = {}, game:GetService("UserInputService"), game:GetService("Players").LocalPlayer, game:GetService("RunService")

local VRService = game:GetService("VRService")
if VRService.VREnabled then return end

game:GetService("StarterPlayer").DevComputerMovementMode = Enum.DevComputerMovementMode.KeyboardMouse
game:GetService("StarterPlayer").DevTouchMovementMode = Enum.DevTouchMovementMode.Thumbstick

if not LP or not uis then return end

pcall(RS.UnbindFromRenderStep, RS, name)

local function getchar()
   return LP.Character or LP.CharacterAdded:Wait()
end

function gethrp(c)
   return c and (c:FindFirstChild("HumanoidRootPart") or c.RootPart or c.PrimaryPart or c:FindFirstChild("Torso") or c:FindFirstChild("UpperTorso") or c:FindFirstChildWhichIsA("BasePart"))
end

local flashback = { lastinput = false, canrevert = true }

function flashback:Advance(char, hrp, hum, allowinput)
   if not char or not hrp or not hum then return end
   if #frames > flashbacklength * 60 then
       table.remove(frames, 1)
   end

   if allowinput and not self.canrevert then
       self.canrevert = true
   end

   if self.lastinput then
       hum.PlatformStand = false
       self.lastinput = false
   end

   table.insert(frames, {
       hrp.CFrame,
       hrp.Velocity,
       hum:GetState(),
       hum.PlatformStand,
       char:FindFirstChildOfClass("Tool")
   })
end

function flashback:Revert(char, hrp, hum)
   if not char or not hrp or not hum or #frames == 0 or not self.canrevert then
       self.canrevert = false
       self:Advance(char, hrp, hum)
       return
   end

   local num = #frames
   for i = 1, flashbackspeed do
       table.remove(frames, num)
       num = num - 1
   end
   
   self.lastinput = true
   local lastframe = frames[num]
   table.remove(frames, num)
   hrp.CFrame = lastframe[1]
   hrp.Velocity = -lastframe[2]
   hum:ChangeState(lastframe[3])
   hum.PlatformStand = lastframe[4] 
   
   local currenttool = char:FindFirstChildOfClass("Tool")
   if lastframe[5] then
       if not currenttool then
           hum:EquipTool(lastframe[5])
       end
   else
       hum:UnequipTools()
   end
end

local function step()
   local char = getchar()
   local hrp = gethrp(char)
   local hum = char and char:FindFirstChildWhichIsA("Humanoid")
   if not char or not hrp or not hum then return end
   
   if uis:IsKeyDown(Enum.KeyCode[key]) then
       flashback:Revert(char, hrp, hum)
   else
       flashback:Advance(char, hrp, hum, true)
   end
   
   if uis:IsKeyDown(Enum.KeyCode[killKey]) then
       RS:UnbindFromRenderStep(name)
       script:Destroy()
   end
end

pcall(function()
   RS:BindToRenderStep(name, 1, step)
end)
